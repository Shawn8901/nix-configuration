From e2e5c6ed4b8b30df33d1590b93a22eeaa6d8a32c Mon Sep 17 00:00:00 2001
From: Sergey Vlasov <sigprof@gmail.com>
Date: Sat, 29 May 2021 18:32:41 +0300
Subject: [PATCH] Make the app runnable without `pkg`

The app code assumed that it would be run after packaging with `pkg`, so
that `process.execPath` would point to the packaged executable, and
other files would be found relative to that path.  Make the code work
when run in a separate `node` interpreter, where `process.execPath`
points to the `node` executable, and `process.argv[1]` points to the
`index.js` script file used as the entry point.

The new code assumes that it is run through a wrapper script named
`net.downloadhelper.coapp`, which is located in the same directory as
`index.js` (the name of this wrapper script is returned in response to
some RPC requests).
---
 app/converter.js          |  3 ++-
 app/main.js               |  4 +++-
 app/native-autoinstall.js | 12 ++++++------
 3 files changed, 11 insertions(+), 8 deletions(-)

diff --git a/app/converter.js b/app/converter.js
index 682b20d..ec7b6b3 100644
--- a/app/converter.js
+++ b/app/converter.js
@@ -44,7 +44,7 @@ else if(process.arch=="ia32")
 else
 	throw new Error("Unsupported architecture",process.arch);
 
-const binaryDir = path.join(path.dirname(process.execPath),"..","converter","build",platform,arch);
+const binaryDir = "@ffmpeg@/bin";
 const binaryPath = path.join(binaryDir,"ffmpeg");
 const probeBinaryPath = path.join(binaryDir,"ffprobe");
 const playBinaryPath = path.join(binaryDir,"ffplay");
@@ -56,6 +56,7 @@ logger.info("__dirname",__dirname);
 logger.info("__filename",__filename);
 logger.info("path.resolve('.')",path.resolve('.'));
 logger.info("process.execPath",process.execPath);
+logger.info("process.argv[1]",process.argv[1]);
 
 function ExecConverter(args) {
 	var outBuffers = [];
diff --git a/app/main.js b/app/main.js
index c6fd51f..a21b09d 100644
--- a/app/main.js
+++ b/app/main.js
@@ -19,6 +19,8 @@ You should have received a copy of the GNU General Public License
 along with Vdhcoapp. If not, see <http://www.gnu.org/licenses/>
 */
 
+const path = require('path');
+
 if(process.argv[2]=="install")
 	require("./native-autoinstall").install();
 if(process.argv[2]=="uninstall")
@@ -56,7 +58,7 @@ rpc.listen({
 			id: config.id,
 			name: manifest.name,
 			version: manifest.version,
-			binary: process.execPath,
+			binary: path.join(path.dirname(process.argv[1]),"net.downloadhelper.coapp"),
 			displayName: config.name,
 			description: config.description,
 			home: process.env.HOME || process.env.HOMEDIR || ""
diff --git a/app/native-autoinstall.js b/app/native-autoinstall.js
index 118c019..212eecb 100644
--- a/app/native-autoinstall.js
+++ b/app/native-autoinstall.js
@@ -43,14 +43,14 @@ function GetManifests(config) {
 		firefox: {
 			name: config.id,
 			description: config.description,
-			path: process.execPath,
+			path: path.join(path.dirname(process.argv[1]),"net.downloadhelper.coapp"),
 			type: "stdio",
 			allowed_extensions: config.allowed_extensions.firefox
 		},
 		chrome: {
 			name: config.id,
 			description: config.description,
-			path: process.execPath,
+			path: path.join(path.dirname(process.argv[1]),"net.downloadhelper.coapp"),
 			type: "stdio",
 			allowed_origins: config.allowed_extensions.chrome.concat(
 				config.allowed_extensions.brave,
@@ -60,7 +60,7 @@ function GetManifests(config) {
 		edge: {
 			name: config.id,
 			description: config.description,
-			path: process.execPath,
+			path: path.join(path.dirname(process.argv[1]),"net.downloadhelper.coapp"),
 			type: "stdio",
 			allowed_origins: config.allowed_extensions.edge
 		}
@@ -72,7 +72,7 @@ function ParseModeConfig() {
 	if(os.platform()=="win32")
 		homeVar = "USERPROFILE";
 	var mode;
-	if(process.execPath.startsWith(process.env[homeVar]))
+	if(process.argv[1].startsWith(process.env[homeVar]))
 		mode = "user";
 	else
 		mode = "system";
@@ -82,7 +82,7 @@ function ParseModeConfig() {
 		mode = "system";
 	var config;
 	try {
-		config = JSON.parse(fs.readFileSync(path.resolve(path.dirname(process.execPath),"../config.json"),"utf8"));
+		config = JSON.parse(fs.readFileSync(path.resolve(path.dirname(process.argv[1]),"config.json"),"utf8"));
 	} catch(err) {
 		DisplayMessage("Cannot read config file: "+err.message,"Error");
 		process.exit(-1);
@@ -262,7 +262,7 @@ function WindowsInstall() {
 			return process.exit(-1);
 		}
 	}
-	var manifestsDir = path.resolve(path.dirname(process.execPath),"../manifests");
+	var manifestsDir = path.resolve(path.dirname(process.argv[1]),"manifests");
 	try {
 		fs.mkdirpSync(manifestsDir);
 	} catch(e) {
-- 
2.29.3
